#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Esemka_School_Library
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EsemkaLibrary")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertSaved_Book(Saved_Book instance);
    partial void UpdateSaved_Book(Saved_Book instance);
    partial void DeleteSaved_Book(Saved_Book instance);
    partial void InsertBorrow_Book(Borrow_Book instance);
    partial void UpdateBorrow_Book(Borrow_Book instance);
    partial void DeleteBorrow_Book(Borrow_Book instance);
    partial void InsertBorrow_Category(Borrow_Category instance);
    partial void UpdateBorrow_Category(Borrow_Category instance);
    partial void DeleteBorrow_Category(Borrow_Category instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertNon_Member(Non_Member instance);
    partial void UpdateNon_Member(Non_Member instance);
    partial void DeleteNon_Member(Non_Member instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Esemka_School_Library.Properties.Settings.Default.EsemkaLibraryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Saved_Book> Saved_Books
		{
			get
			{
				return this.GetTable<Saved_Book>();
			}
		}
		
		public System.Data.Linq.Table<Borrow_Book> Borrow_Books
		{
			get
			{
				return this.GetTable<Borrow_Book>();
			}
		}
		
		public System.Data.Linq.Table<Borrow_Category> Borrow_Categories
		{
			get
			{
				return this.GetTable<Borrow_Category>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Non_Member> Non_Members
		{
			get
			{
				return this.GetTable<Non_Member>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private int _Categories_Id;
		
		private string _Writer;
		
		private int _Publication_Year;
		
		private string _Synopsis;
		
		private int _Rating;
		
		private int _Likes;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Nullable<int> _Stock;
		
		private EntitySet<Saved_Book> _Saved_Books;
		
		private EntitySet<Borrow_Book> _Borrow_Books;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategories_IdChanging(int value);
    partial void OnCategories_IdChanged();
    partial void OnWriterChanging(string value);
    partial void OnWriterChanged();
    partial void OnPublication_YearChanging(int value);
    partial void OnPublication_YearChanged();
    partial void OnSynopsisChanging(string value);
    partial void OnSynopsisChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnStockChanging(System.Nullable<int> value);
    partial void OnStockChanged();
    #endregion
		
		public Book()
		{
			this._Saved_Books = new EntitySet<Saved_Book>(new Action<Saved_Book>(this.attach_Saved_Books), new Action<Saved_Book>(this.detach_Saved_Books));
			this._Borrow_Books = new EntitySet<Borrow_Book>(new Action<Borrow_Book>(this.attach_Borrow_Books), new Action<Borrow_Book>(this.detach_Borrow_Books));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Categories_Id", DbType="Int NOT NULL")]
		public int Categories_Id
		{
			get
			{
				return this._Categories_Id;
			}
			set
			{
				if ((this._Categories_Id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategories_IdChanging(value);
					this.SendPropertyChanging();
					this._Categories_Id = value;
					this.SendPropertyChanged("Categories_Id");
					this.OnCategories_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Writer", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Writer
		{
			get
			{
				return this._Writer;
			}
			set
			{
				if ((this._Writer != value))
				{
					this.OnWriterChanging(value);
					this.SendPropertyChanging();
					this._Writer = value;
					this.SendPropertyChanged("Writer");
					this.OnWriterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publication_Year", DbType="Int NOT NULL")]
		public int Publication_Year
		{
			get
			{
				return this._Publication_Year;
			}
			set
			{
				if ((this._Publication_Year != value))
				{
					this.OnPublication_YearChanging(value);
					this.SendPropertyChanging();
					this._Publication_Year = value;
					this.SendPropertyChanged("Publication_Year");
					this.OnPublication_YearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Synopsis", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Synopsis
		{
			get
			{
				return this._Synopsis;
			}
			set
			{
				if ((this._Synopsis != value))
				{
					this.OnSynopsisChanging(value);
					this.SendPropertyChanging();
					this._Synopsis = value;
					this.SendPropertyChanged("Synopsis");
					this.OnSynopsisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int")]
		public System.Nullable<int> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Saved_Book", Storage="_Saved_Books", ThisKey="Id", OtherKey="Book_Id")]
		public EntitySet<Saved_Book> Saved_Books
		{
			get
			{
				return this._Saved_Books;
			}
			set
			{
				this._Saved_Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Borrow_Book", Storage="_Borrow_Books", ThisKey="Id", OtherKey="book_Id")]
		public EntitySet<Borrow_Book> Borrow_Books
		{
			get
			{
				return this._Borrow_Books;
			}
			set
			{
				this._Borrow_Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Book", Storage="_Category", ThisKey="Categories_Id", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Categories_Id = value.Id;
					}
					else
					{
						this._Categories_Id = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Saved_Books")]
	public partial class Saved_Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Book_Id;
		
		private System.Nullable<int> _Member_Id;
		
		private System.Nullable<int> _Non_Member_Id;
		
		private int _id;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Non_Member> _Non_Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBook_IdChanging(int value);
    partial void OnBook_IdChanged();
    partial void OnMember_IdChanging(System.Nullable<int> value);
    partial void OnMember_IdChanged();
    partial void OnNon_Member_IdChanging(System.Nullable<int> value);
    partial void OnNon_Member_IdChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Saved_Book()
		{
			this._Book = default(EntityRef<Book>);
			this._Member = default(EntityRef<Member>);
			this._Non_Member = default(EntityRef<Non_Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Id", DbType="Int NOT NULL")]
		public int Book_Id
		{
			get
			{
				return this._Book_Id;
			}
			set
			{
				if ((this._Book_Id != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBook_IdChanging(value);
					this.SendPropertyChanging();
					this._Book_Id = value;
					this.SendPropertyChanged("Book_Id");
					this.OnBook_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Member_Id", DbType="Int")]
		public System.Nullable<int> Member_Id
		{
			get
			{
				return this._Member_Id;
			}
			set
			{
				if ((this._Member_Id != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMember_IdChanging(value);
					this.SendPropertyChanging();
					this._Member_Id = value;
					this.SendPropertyChanged("Member_Id");
					this.OnMember_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Non_Member_Id", DbType="Int")]
		public System.Nullable<int> Non_Member_Id
		{
			get
			{
				return this._Non_Member_Id;
			}
			set
			{
				if ((this._Non_Member_Id != value))
				{
					if (this._Non_Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNon_Member_IdChanging(value);
					this.SendPropertyChanging();
					this._Non_Member_Id = value;
					this.SendPropertyChanged("Non_Member_Id");
					this.OnNon_Member_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Saved_Book", Storage="_Book", ThisKey="Book_Id", OtherKey="Id", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Saved_Books.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Saved_Books.Add(this);
						this._Book_Id = value.Id;
					}
					else
					{
						this._Book_Id = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Saved_Book", Storage="_Member", ThisKey="Member_Id", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Saved_Books.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Saved_Books.Add(this);
						this._Member_Id = value.Id;
					}
					else
					{
						this._Member_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Non_Member_Saved_Book", Storage="_Non_Member", ThisKey="Non_Member_Id", OtherKey="Id", IsForeignKey=true)]
		public Non_Member Non_Member
		{
			get
			{
				return this._Non_Member.Entity;
			}
			set
			{
				Non_Member previousValue = this._Non_Member.Entity;
				if (((previousValue != value) 
							|| (this._Non_Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Non_Member.Entity = null;
						previousValue.Saved_Books.Remove(this);
					}
					this._Non_Member.Entity = value;
					if ((value != null))
					{
						value.Saved_Books.Add(this);
						this._Non_Member_Id = value.Id;
					}
					else
					{
						this._Non_Member_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Non_Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Borrow_Books")]
	public partial class Borrow_Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _member_Id;
		
		private int _book_Id;
		
		private int _borrow_category_Id;
		
		private System.DateTime _borrow_date;
		
		private System.DateTime _book_return_date;
		
		private string _is_return;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Borrow_Category> _Borrow_Category;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onmember_IdChanging(int value);
    partial void Onmember_IdChanged();
    partial void Onbook_IdChanging(int value);
    partial void Onbook_IdChanged();
    partial void Onborrow_category_IdChanging(int value);
    partial void Onborrow_category_IdChanged();
    partial void Onborrow_dateChanging(System.DateTime value);
    partial void Onborrow_dateChanged();
    partial void Onbook_return_dateChanging(System.DateTime value);
    partial void Onbook_return_dateChanged();
    partial void Onis_returnChanging(string value);
    partial void Onis_returnChanged();
    #endregion
		
		public Borrow_Book()
		{
			this._Book = default(EntityRef<Book>);
			this._Borrow_Category = default(EntityRef<Borrow_Category>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member_Id", DbType="Int NOT NULL")]
		public int member_Id
		{
			get
			{
				return this._member_Id;
			}
			set
			{
				if ((this._member_Id != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmember_IdChanging(value);
					this.SendPropertyChanging();
					this._member_Id = value;
					this.SendPropertyChanged("member_Id");
					this.Onmember_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_Id", DbType="Int NOT NULL")]
		public int book_Id
		{
			get
			{
				return this._book_Id;
			}
			set
			{
				if ((this._book_Id != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbook_IdChanging(value);
					this.SendPropertyChanging();
					this._book_Id = value;
					this.SendPropertyChanged("book_Id");
					this.Onbook_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_borrow_category_Id", DbType="Int NOT NULL")]
		public int borrow_category_Id
		{
			get
			{
				return this._borrow_category_Id;
			}
			set
			{
				if ((this._borrow_category_Id != value))
				{
					if (this._Borrow_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onborrow_category_IdChanging(value);
					this.SendPropertyChanging();
					this._borrow_category_Id = value;
					this.SendPropertyChanged("borrow_category_Id");
					this.Onborrow_category_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_borrow_date", DbType="DateTime NOT NULL")]
		public System.DateTime borrow_date
		{
			get
			{
				return this._borrow_date;
			}
			set
			{
				if ((this._borrow_date != value))
				{
					this.Onborrow_dateChanging(value);
					this.SendPropertyChanging();
					this._borrow_date = value;
					this.SendPropertyChanged("borrow_date");
					this.Onborrow_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_return_date", DbType="DateTime NOT NULL")]
		public System.DateTime book_return_date
		{
			get
			{
				return this._book_return_date;
			}
			set
			{
				if ((this._book_return_date != value))
				{
					this.Onbook_return_dateChanging(value);
					this.SendPropertyChanging();
					this._book_return_date = value;
					this.SendPropertyChanged("book_return_date");
					this.Onbook_return_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_return", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string is_return
		{
			get
			{
				return this._is_return;
			}
			set
			{
				if ((this._is_return != value))
				{
					this.Onis_returnChanging(value);
					this.SendPropertyChanging();
					this._is_return = value;
					this.SendPropertyChanged("is_return");
					this.Onis_returnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Borrow_Book", Storage="_Book", ThisKey="book_Id", OtherKey="Id", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Borrow_Books.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Borrow_Books.Add(this);
						this._book_Id = value.Id;
					}
					else
					{
						this._book_Id = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrow_Category_Borrow_Book", Storage="_Borrow_Category", ThisKey="borrow_category_Id", OtherKey="Id", IsForeignKey=true)]
		public Borrow_Category Borrow_Category
		{
			get
			{
				return this._Borrow_Category.Entity;
			}
			set
			{
				Borrow_Category previousValue = this._Borrow_Category.Entity;
				if (((previousValue != value) 
							|| (this._Borrow_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Borrow_Category.Entity = null;
						previousValue.Borrow_Books.Remove(this);
					}
					this._Borrow_Category.Entity = value;
					if ((value != null))
					{
						value.Borrow_Books.Add(this);
						this._borrow_category_Id = value.Id;
					}
					else
					{
						this._borrow_category_Id = default(int);
					}
					this.SendPropertyChanged("Borrow_Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Borrow_Book", Storage="_Member", ThisKey="member_Id", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Borrow_Books.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Borrow_Books.Add(this);
						this._member_Id = value.Id;
					}
					else
					{
						this._member_Id = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Borrow_Category")]
	public partial class Borrow_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category;
		
		private EntitySet<Borrow_Book> _Borrow_Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public Borrow_Category()
		{
			this._Borrow_Books = new EntitySet<Borrow_Book>(new Action<Borrow_Book>(this.attach_Borrow_Books), new Action<Borrow_Book>(this.detach_Borrow_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrow_Category_Borrow_Book", Storage="_Borrow_Books", ThisKey="Id", OtherKey="borrow_category_Id")]
		public EntitySet<Borrow_Book> Borrow_Books
		{
			get
			{
				return this._Borrow_Books;
			}
			set
			{
				this._Borrow_Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Borrow_Category = this;
		}
		
		private void detach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Borrow_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Image;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public Category()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Book", Storage="_Books", ThisKey="Id", OtherKey="Categories_Id")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private EntitySet<Saved_Book> _Saved_Books;
		
		private EntitySet<Borrow_Book> _Borrow_Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Member()
		{
			this._Saved_Books = new EntitySet<Saved_Book>(new Action<Saved_Book>(this.attach_Saved_Books), new Action<Saved_Book>(this.detach_Saved_Books));
			this._Borrow_Books = new EntitySet<Borrow_Book>(new Action<Borrow_Book>(this.attach_Borrow_Books), new Action<Borrow_Book>(this.detach_Borrow_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Saved_Book", Storage="_Saved_Books", ThisKey="Id", OtherKey="Member_Id")]
		public EntitySet<Saved_Book> Saved_Books
		{
			get
			{
				return this._Saved_Books;
			}
			set
			{
				this._Saved_Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Borrow_Book", Storage="_Borrow_Books", ThisKey="Id", OtherKey="member_Id")]
		public EntitySet<Borrow_Book> Borrow_Books
		{
			get
			{
				return this._Borrow_Books;
			}
			set
			{
				this._Borrow_Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Borrow_Books(Borrow_Book entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Non-Member]")]
	public partial class Non_Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private EntitySet<Saved_Book> _Saved_Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Non_Member()
		{
			this._Saved_Books = new EntitySet<Saved_Book>(new Action<Saved_Book>(this.attach_Saved_Books), new Action<Saved_Book>(this.detach_Saved_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Non_Member_Saved_Book", Storage="_Saved_Books", ThisKey="Id", OtherKey="Non_Member_Id")]
		public EntitySet<Saved_Book> Saved_Books
		{
			get
			{
				return this._Saved_Books;
			}
			set
			{
				this._Saved_Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Non_Member = this;
		}
		
		private void detach_Saved_Books(Saved_Book entity)
		{
			this.SendPropertyChanging();
			entity.Non_Member = null;
		}
	}
}
#pragma warning restore 1591
